generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Comment {
  id            String    @id @map("_id")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  content       String
  authorId      String
  postId        String
  likes         String[]  @default([])
  dislikes      String[]  @default([])
  parentId      String?
  User          User      @relation(fields: [authorId], references: [id])
  Comment       Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_Comment Comment[] @relation("CommentToComment")
  Post          Post      @relation(fields: [postId], references: [id])
}

model Configuration {
  id          String   @id @map("_id")
  name        String
  data        Json[]
  isActivated Boolean?
}

model GameAccount {
  id            String    @id @map("_id")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  userId        String
  username      String    @unique
  password      String
  isMainAccount Boolean   @default(false)
  User          User      @relation(fields: [userId], references: [id])
  Order         Order[]
  Pincode       Pincode[]
  Player        Player[]
}

model Guild {
  id        String   @id @map("_id")
  createdAt DateTime @default(now())
  updatedAt DateTime
  gameMode  String
  name      String
  cities    String[]
  kingdom   String
  Player    Player[]
}

model Order {
  id              String       @id @map("_id")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime
  userId          String
  status          Status       @default(PENDING)
  price           Float
  donate          Int
  amount          Int
  metaDataPayment Json
  productId       String
  generatePincode Boolean      @default(false)
  gameAccountId   String?
  GameAccount     GameAccount? @relation(fields: [gameAccountId], references: [id])
  Product         Product      @relation(fields: [productId], references: [id])
  User            User         @relation(fields: [userId], references: [id])
}

model Pincode {
  id            String      @id @map("_id")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  code          String      @unique
  isUsed        Boolean     @default(false)
  product       Json
  gameAccountId String
  GameAccount   GameAccount @relation(fields: [gameAccountId], references: [id])
}

model Player {
  id             String       @id @map("_id")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  slot           Int
  gameMode       String
  name           String
  level          Int[]
  class          String[]
  evolution      String
  kingdom        String
  frag           Int
  guildHierarchy String
  guildId        String?
  accountId      String?
  GameAccount    GameAccount? @relation(fields: [accountId], references: [id])
  Guild          Guild?       @relation(fields: [guildId], references: [id])
}

model Post {
  id        String    @id @map("_id")
  createdAt DateTime  @default(now())
  updatedAt DateTime
  title     String
  content   String
  image     String
  authorId  String
  category  String
  tags      String[]
  likes     String[]  @default([])
  dislikes  String[]  @default([])
  Comment   Comment[]
  User      User      @relation(fields: [authorId], references: [id])
}

model Product {
  id             String   @id @map("_id")
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  name           String   @unique
  items          Json[]
  price          Float
  priceDiscount  Float?
  donate         Int
  donateDiscount Int?
  image          String
  isActivated    Boolean  @default(false)
  description    String
  Order          Order[]
}

model Session {
  id           String   @id @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @map("_id")
  name          String?
  email         String        @unique
  password      String
  role          Roles         @default(USER)
  emailVerified DateTime?
  image         String?
  donation      Int           @default(0)
  Account       Account[]
  Comment       Comment[]
  GameAccount   GameAccount[]
  Order         Order[]
  Post          Post[]
  Session       Session[]
}

model VerificationToken {
  id         String   @id @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Roles {
  ADMIN
  USER
  MODERATOR
  CONTENT_CREATOR
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
  EXPIRED
  ERROR
}
